(function(){
  function el(tag, cls){ var n=document.createElement(tag); if(cls) n.className=cls; return n; }
  function txt(t){ return document.createTextNode(t); }
  function showToast(msg, timeout){ var t=document.getElementById('toast'); if(!t) return; t.textContent=msg; t.style.display='block'; clearTimeout(t._tm); t._tm=setTimeout(function(){ t.style.display='none'; }, timeout||2500); }
  function fmtMoney(v){ try{ return new Intl.NumberFormat(undefined,{style:'currency',currency:'USD',maximumFractionDigits:0}).format(Number(v||0)); }catch(e){return '$0'} }
  function fmtPct(v){ if(!isFinite(v)) return '—'; return (Number(v||0)*100).toFixed(2)+'%'; }

  var State = { tag:'v1.15', savedName:null, deal:{ meta:{price:1500000,units:14,downPaymentPct:0.35,address:''}}, apod:{ incomes:[{label:'Unit Income',amount:175200}], expenses:[{label:'Taxes',amount:7100,pctOfEGI:false},{label:'Insurance',amount:6585,pctOfEGI:false}] }, loanScenarios:[{id:1,loanAmount:975000,interestRate:0.065,amortizationYears:30}] };
  try{ var s = localStorage.getItem('grolinx_state_v1'); if(s) State = Object.assign(State, JSON.parse(s)); }catch(e){}
  function persist(){ try{ localStorage.setItem('grolinx_state_v1', JSON.stringify(State)); }catch(e){} }

  function monthlyPayment(loanAmount,annualRate,amortYears){ if(!loanAmount||!amortYears) return 0; var r=(annualRate||0)/12; var n=amortYears*12; if(r===0) return loanAmount/n; return loanAmount * r / (1 - Math.pow(1+r,-n)); }
  function yearlyDebtService(loan){ if(!loan) return 0; var m = monthlyPayment(loan.loanAmount||0, loan.interestRate||0, loan.amortizationYears||30); return m*12; }
  function computeNOI(){ var inc = (State.apod.incomes||[]).reduce(function(s,i){return s + Number(i.amount||0)},0); var exp = (State.apod.expenses||[]).reduce(function(s,e){ return s + (e.pctOfEGI ? (Number(e.amount||0)/100)*inc : Number(e.amount||0)); },0); return {inc:inc,expenses:exp,noi: inc-exp}; }
  function computeTopKPIs(){ var price = Number(State.deal.meta.price||0); var k = computeNOI(); var loan = (State.loanScenarios||[])[0]; var ds = loan ? yearlyDebtService(loan) : 0; var equity = price * (Number(State.deal.meta.downPaymentPct||0)); var cashFlow = k.noi - ds; return {price:price,noi:k.noi,inc:k.inc,expenses:k.expenses,cap: price? k.noi/price:0,ds:ds,coc: equity? cashFlow/equity:0,grm:k.inc? price/k.inc:0,equity:equity,cashFlow:cashFlow}; }

  var inModuleContent = false; var currentDealTab = 'inputs'; var currentModule = 'hub';

  // updateTopTiles now only shows when in deal.inputs
  function updateTopTiles(){
    var root=document.getElementById('topTiles');
    if(!root) return;
    if(!inModuleContent || currentModule!=='deal' || currentDealTab!=='inputs'){ root.style.display='none'; return; }
    root.style.display='grid';
    root.innerHTML='';
    var k=computeTopKPIs();
    var list=[ ['NOI', fmtMoney(k.noi)], ['Cap Rate', fmtPct(k.cap)], ['CoC', fmtPct(k.coc)], ['GRM', k.grm ? k.grm.toFixed(2) : '—'], ['Cash Flow (Y1)', fmtMoney(k.cashFlow)] ];
    list.forEach(function(it){
      var t=el('div','tile'); var lbl=el('div','label'); lbl.appendChild(txt(it[0])); var val=el('div','value'); val.appendChild(txt(it[1])); t.appendChild(lbl); t.appendChild(val); root.appendChild(t);
    });
  }

  var MODULE_SUBTILES = { dashboard:[{id:'savedDeals',title:'Saved Deals',desc:'View and manage saved deals'},{id:'portfolio',title:'Portfolio Summary',desc:'Summary of holdings and performance'},{id:'alerts',title:'Alerts',desc:'Custom alerts & tasks'}], finder:[{id:'search',title:'Search Properties',desc:'Filter and browse listings'},{id:'map',title:'Map View',desc:'Map-based search & heatmaps'},{id:'savedFilters',title:'Saved Filters',desc:'Manage saved searches'}], deal:[{id:'inputs',title:'Inputs',desc:'Edit property inputs'},{id:'financing',title:'Financing',desc:'Compare loan scenarios'},{id:'t12',title:'T12',desc:'Monthly T12 cashflow editor'},{id:'apod',title:'APOD',desc:'Income & expense lineup'}], docs:[{id:'exports',title:'Exports',desc:'Export CSV, XLSX & templates'},{id:'loi',title:'LOIs / Templates',desc:'Generate LOIs and templates'},{id:'sign',title:'Signatures',desc:'eSign & workflows (stub)'}] };
  var moduleTitleMap = { hub:'Module Hub', dashboard:'Investor Dashboard', finder:'Investment Finder', deal:'Deal Analyzer', docs:'Docs & Exports' };

  function renderModuleTilesScreen(moduleId){
    var list = MODULE_SUBTILES[moduleId] || [];
    var wrap = el('div'); wrap.className = 'card';
    var title = el('h3'); title.appendChild(txt(moduleTitleMap[moduleId] || 'Module')); wrap.appendChild(title);
    var sub = el('div'); sub.className = 'module-tiles';
    if(!list.length){ var p = el('div'); p.className='muted'; p.appendChild(txt('No sub-tiles defined for this module.')); sub.appendChild(p); }
    else { list.forEach(function(it){ var t = el('div','module-tile'); var h = el('h5'); h.appendChild(txt(it.title)); var p = el('div'); p.className = 'muted'; p.appendChild(txt(it.desc)); t.appendChild(h); t.appendChild(p); t.addEventListener('click', function(){ enterModuleContent(moduleId, it.id); }); sub.appendChild(t); }); }
    wrap.appendChild(sub);
    return wrap;
  }

  function FinderRender(container){ /* unchanged */ 
    if(!container) return; container.innerHTML=''; var card=el('div','card'); var h=el('h3'); h.appendChild(txt('Investment Finder')); card.appendChild(h);
    var form=el('form'); form.style.marginBottom='12px';
    var fdType = el('div','field'); var lbType = el('label'); lbType.appendChild(txt('Property Type'));
    var sel = el('select'); sel.name = 'propertyType'; sel.className = 'input'; sel.multiple = true;
    ['Multifamily','Retail','Office','Mixed-Use','Industrial','Land'].forEach(function(o){ var opt = el('option'); opt.value = o; opt.textContent = o; sel.appendChild(opt); });
    fdType.appendChild(lbType); fdType.appendChild(sel); form.appendChild(fdType);
    var fdUnitsMin = el('div','field'); var lbUM = el('label'); lbUM.appendChild(txt('Min Units')); var inUM = el('input'); inUM.name = 'minUnits'; inUM.type = 'number'; inUM.className = 'input'; fdUnitsMin.appendChild(lbUM); fdUnitsMin.appendChild(inUM); fdUnitsMin.style.display = 'none'; form.appendChild(fdUnitsMin);
    var fdUnitsMax = el('div','field'); var lbUX = el('label'); lbUX.appendChild(txt('Max Units')); var inUX = el('input'); inUX.name = 'maxUnits'; inUX.type = 'number'; inUX.className = 'input'; fdUnitsMax.appendChild(lbUX); fdUnitsMax.appendChild(inUX); fdUnitsMax.style.display = 'none'; form.appendChild(fdUnitsMax);
    var fdCity = el('div','field'); var lbCity = el('label'); lbCity.appendChild(txt('City')); var inputCity = el('input'); inputCity.name = 'city'; inputCity.type = 'text'; inputCity.className = 'input'; fdCity.appendChild(lbCity); fdCity.appendChild(inputCity); form.appendChild(fdCity);
    var fdState = el('div','field'); var lbState = el('label'); lbState.appendChild(txt('State')); var inputState = el('input'); inputState.type = 'text'; inputState.className = 'input'; fdState.appendChild(lbState); fdState.appendChild(inputState); form.appendChild(fdState);
    var fdMinCap = el('div','field'); var lbCap = el('label'); lbCap.appendChild(txt('Min Cap Rate')); var inCap = el('input'); inCap.name = 'minCap'; inCap.type = 'number'; inCap.className = 'input'; fdMinCap.appendChild(lbCap); fdMinCap.appendChild(inCap); form.appendChild(fdMinCap);
    var priceWrap = el('div','field'); var lbPrice = el('label'); lbPrice.appendChild(txt('Price Range')); priceWrap.appendChild(lbPrice); var pr = el('div','price-range');
    var inMinP = el('input'); inMinP.name = 'minPrice'; inMinP.type = 'number'; inMinP.placeholder = 'Min'; inMinP.className = 'input';
    var dash = el('div'); dash.appendChild(txt('to'));
    var inMaxP = el('input'); inMaxP.name = 'maxPrice'; inMaxP.type = 'number'; inMaxP.placeholder = 'Max'; inMaxP.className = 'input'; pr.appendChild(inMinP); pr.appendChild(dash); pr.appendChild(inMaxP); priceWrap.appendChild(pr); form.appendChild(priceWrap);
    var btnSearch = el('button','btn'); btnSearch.type = 'submit'; btnSearch.appendChild(txt('Search')); form.appendChild(btnSearch);
    var resultsDiv = el('div'); card.appendChild(form); card.appendChild(resultsDiv); container.appendChild(card);

    function updateUnitsVisibility(){ var selected = Array.from(sel.selectedOptions).map(function(o){ return o.value; }); if(selected.includes('Multifamily')){ fdUnitsMin.style.display = ''; fdUnitsMax.style.display = ''; } else { fdUnitsMin.style.display = 'none'; fdUnitsMax.style.display = 'none'; inUM.value = ''; inUX.value = ''; } }
    sel.addEventListener('change', updateUnitsVisibility); updateUnitsVisibility();
    var sample=[ {id:101,name:'Maple Court',city:'Portland',state:'OR',units:16,price:1850000,cap:0.055,type:'Multifamily'}, {id:102,name:'Cedar Flats',city:'Austin',state:'TX',units:12,price:1420000,cap:0.061,type:'Multifamily'}, {id:103,name:'Riverside Retail',city:'Boise',state:'ID',units:4,price:950000,cap:0.068,type:'Retail'} ];
    function renderResults(list){ resultsDiv.innerHTML=''; list.forEach(function(p){ var row=el('div'); row.style.display='flex'; row.style.justifyContent='space-between'; row.style.padding='8px'; row.style.border='1px solid var(--border)'; row.style.borderRadius='8px'; row.style.marginBottom='8px'; var left=el('div'); var title=el('div'); title.style.fontWeight='700'; title.appendChild(txt(p.name)); var meta=el('div'); meta.className='muted'; meta.appendChild(txt(p.city + ', ' + p.state + ' • ' + p.units + ' units • Cap ' + fmtPct(p.cap))); left.appendChild(title); left.appendChild(meta); var right=el('div'); right.style.display='flex'; right.style.flexDirection='column'; right.style.gap='6px'; var btnA=el('button','btn-ghost'); btnA.appendChild(txt('Analyze')); btnA.addEventListener('click', function(){ loadPropertyToState(p); }); var btnS=el('button','btn'); btnS.appendChild(txt('Analyze & Save')); btnS.addEventListener('click', function(){ loadPropertyToState(p); State.savedName=p.name; persist(); showToast('Saved (preview)'); }); right.appendChild(btnA); right.appendChild(btnS); row.appendChild(left); row.appendChild(right); resultsDiv.appendChild(row); }); }
    renderResults(sample);
    form.addEventListener('submit', function(e){ e.preventDefault(); var filters = { propertyType: sel.selectedOptions ? Array.from(sel.selectedOptions).map(o => o.value) : [], city: inputCity.value, state: inputState.value, minUnits: inUM.value, maxUnits: inUX.value, minCap: inCap.value, minPrice: inMinP.value, maxPrice: inMaxP.value }; var filtered = sample.filter(function(p){ if(filters.propertyType.length > 0 && !filters.propertyType.includes(p.type)) return false; if(filters.city && !p.city.toLowerCase().includes(filters.city.toLowerCase())) return false; if(filters.state && !p.state.toLowerCase().includes(filters.state.toLowerCase())) return false; if(filters.minUnits && p.units < Number(filters.minUnits)) return false; if(filters.maxUnits && p.units > Number(filters.maxUnits)) return false; if(filters.minPrice && p.price < Number(filters.minPrice)) return false; if(filters.maxPrice && p.price > Number(filters.maxPrice)) return false; if(filters.minCap && p.cap < Number(filters.minCap)) return false; return true; }); renderResults(filtered); });
  }

  function loadPropertyToState(p){ State.deal.meta.address = p.name; State.deal.meta.city = p.city; State.deal.meta.state = p.state; State.deal.meta.price = p.price; State.deal.meta.units = p.units; persist(); enterModuleContent('deal','inputs'); updateTopTiles(); }

  function createKPIsElement(){ var k=computeTopKPIs(); var kpiWrap = el('div','tiles'); var list=[ ['NOI', fmtMoney(k.noi)], ['Cap Rate', fmtPct(k.cap)], ['CoC', fmtPct(k.coc)], ['GRM', k.grm ? k.grm.toFixed(2) : '—'], ['Cash Flow (Y1)', fmtMoney(k.cashFlow)] ]; list.forEach(function(it){ var t=el('div','tile'); var lbl=el('div','label'); lbl.appendChild(txt(it[0])); var val=el('div','value'); val.appendChild(txt(it[1])); t.appendChild(lbl); t.appendChild(val); kpiWrap.appendChild(t); }); return kpiWrap; }

  function DealAnalyzerView(){
    var root=el('div');
    var tabsDiv=el('div','deal-tabs');
    var tabs=[{id:'inputs',label:'Inputs'},{id:'financing',label:'Financing'},{id:'t12',label:'T12'},{id:'apod',label:'APOD'}];
    var content=el('div'); content.style.marginTop='12px';
    tabs.forEach(function(tab,i){ var b=el('button','deal-tab'); if(i===0) b.classList.add('active'); b.appendChild(txt(tab.label)); b.addEventListener('click', function(){ content.innerHTML=''; tabsDiv.querySelectorAll('button').forEach(function(btn){ btn.classList.remove('active'); }); b.classList.add('active'); currentDealTab = tab.id; renderDealTabContent(tab.id, content); updateTopTiles(); }); tabsDiv.appendChild(b); });
    root.appendChild(tabsDiv);

    // NOTE: KPI tiles are removed from here to avoid duplication — KPIs will be shown in Inputs tab only (renderInputsTab injects them)
    root.appendChild(content);
    renderDealTabContent('inputs', content);
    return root;
  }

  function renderDealTabContent(tabId, container){ currentDealTab = tabId; if(tabId==='inputs') return renderInputsTab(container); if(tabId==='financing') return renderFinancingTab(container); if(tabId==='t12') return renderT12Tab(container); if(tabId==='apod') return renderAPODTab(container); }

  function renderInputsTab(container){
    container.innerHTML='';
    // Inject KPI tiles *inside* the Inputs content area (and ensure topTiles also updated via updateTopTiles)
    var kpis = createKPIsElement();
    container.appendChild(kpis);

    var card=el('div','card');
    var m=State.deal.meta||{};
    var formGrid=el('div','form-grid');
    var fields=[ {label:'Address', name:'address', type:'text'}, {label:'Price', name:'price', type:'number'}, {label:'Units', name:'units', type:'number'}, {label:'Down Payment %', name:'downPaymentPct', type:'number'}, {label:'Year Built', name:'yearBuilt', type:'number'}, {label:'Repair Budget', name:'repairBudget', type:'number'}, {label:'Closing Costs %', name:'closingCostsPct', type:'number'}, {label:'Acquisition Costs', name:'acquisitionCosts', type:'number'}, {label:'ARV', name:'arv', type:'number'}, {label:'Monthly Reserves', name:'reservesMonthly', type:'number'}, {label:'Square Footage', name:'sqft', type:'number'}, {label:'Property Type', name:'type', type:'text'} ];
    fields.forEach(function(f){ var fd=el('div','field'); var lb=el('label'); lb.appendChild(txt(f.label)); var input=el('input'); input.name=f.name; input.type=f.type; input.className='input'; input.value = m[f.name] || ''; input.addEventListener('change', function(){ var val = input.type==='number' ? Number(input.value) : input.value; State.deal.meta[f.name] = val; persist(); updateTopTiles(); }); fd.appendChild(lb); fd.appendChild(input); formGrid.appendChild(fd); });
    card.appendChild(formGrid);
    container.appendChild(card);
    // updateTopTiles will be called by caller; ensure it runs to sync topTiles container too
  }

  function renderFinancingTab(container){ container.innerHTML=''; var backRow=el('div','back-row'); var btnBack=el('button','btn-ghost'); btnBack.appendChild(txt('← Back to Deal Analyzer')); btnBack.addEventListener('click', function(){ renderTabsAndLoad('deal'); }); backRow.appendChild(btnBack); container.appendChild(backRow); var card=el('div','card'); var loanList=State.loanScenarios||[]; var currentLoan=loanList[0]||{id:1,loanAmount:0,interestRate:0.06,amortizationYears:30,propertyId:State.deal.meta.address||'default'}; var formGrid=el('div','form-grid'); var fields=[ {label:'Loan Amount', name:'loanAmount', type:'number'}, {label:'Interest Rate', name:'interestRate', type:'number'}, {label:'Amortization Years', name:'amortizationYears', type:'number'}, {label:'Loan Type', name:'loanType', type:'text'}, {label:'Points', name:'points', type:'number'}, {label:'Origination Fee', name:'originationFee', type:'number'}, {label:'Prepayment Penalty (months)', name:'prepaymentPenalty', type:'number'} ]; fields.forEach(function(f){ var fd=el('div','field'); var lb=el('label'); lb.appendChild(txt(f.label)); var input=el('input'); input.name=f.name; input.type=f.type; input.className='input'; input.value=currentLoan[f.name]||''; input.addEventListener('change', function(){ var val=input.type==='number'?Number(input.value):input.value; currentLoan[f.name]=val; persist(); updateTopTiles(); }); fd.appendChild(lb); fd.appendChild(input); formGrid.appendChild(fd); }); card.appendChild(formGrid); var btnSave=el('button','btn'); btnSave.textContent='Save Financing Scenario'; btnSave.addEventListener('click', function(){ currentLoan.propertyId=State.deal.meta.address||'default'; if(!currentLoan.id) currentLoan.id=Date.now(); var idx=loanList.findIndex(l=>l.id===currentLoan.id); if(idx>=0){ loanList[idx]=currentLoan } else { loanList.push(currentLoan) } persist(); showToast('Financing scenario saved'); renderFinancingTab(container); }); card.appendChild(btnSave); var grouped={}; loanList.forEach(function(loan){ var pid=loan.propertyId||'default'; if(!grouped[pid]) grouped[pid]=[]; grouped[pid].push(loan); }); var listDiv=el('div','financing-list'); Object.keys(grouped).forEach(function(pid){ var propTitle=el('h4'); propTitle.textContent=pid; listDiv.appendChild(propTitle); grouped[pid].forEach(function(loan){ var item=el('div','financing-item'); var desc=document.createElement('span'); desc.textContent=`Loan: $${loan.loanAmount||0} @ ${loan.interestRate||0}% for ${loan.amortizationYears||0} years`; var btnEdit=document.createElement('button'); btnEdit.textContent='Edit'; btnEdit.addEventListener('click', function(){ Object.assign(currentLoan, loan); renderFinancingTab(container); }); item.appendChild(desc); item.appendChild(btnEdit); listDiv.appendChild(item); }); }); card.appendChild(listDiv); container.appendChild(card); }

  function renderT12Tab(container){ container.innerHTML=''; var backRow=el('div','back-row'); var btnBack=el('button','btn-ghost'); btnBack.appendChild(txt('← Back to Deal Analyzer')); btnBack.addEventListener('click', function(){ renderTabsAndLoad('deal'); }); backRow.appendChild(btnBack); container.appendChild(backRow); var card=el('div','card'); var monthNames=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']; var startMonth=0; var header=el('div'); header.style.display='flex'; header.style.gap='8px'; header.style.marginBottom='12px'; var lb=el('label'); lb.textContent='Start Month:'; var select=el('select'); monthNames.forEach(function(m,i){ var opt=el('option'); opt.value=i; opt.textContent=m; select.appendChild(opt); }); select.value=startMonth; select.addEventListener('change', function(){ startMonth=Number(select.value); renderT12Table(); }); header.appendChild(lb); header.appendChild(select); card.appendChild(header); var table=el('table'); var thead=el('thead'); var trh=el('tr'); trh.appendChild(el('th')); for(var i=0;i<12;i++){ var th=el('th'); th.textContent=monthNames[(startMonth+i)%12]; trh.appendChild(th) } thead.appendChild(trh); table.appendChild(thead); var tbody=el('tbody'); (State.apod.incomes||[]).forEach(function(it){ if(!Array.isArray(it.monthly)||it.monthly.length<12) it.monthly=new Array(12).fill(it.amount?Number(it.amount)/12:0) }); (State.apod.expenses||[]).forEach(function(it){ if(!Array.isArray(it.monthly)||it.monthly.length<12) it.monthly=new Array(12).fill(it.amount?Number(it.amount)/12:0) }); function renderT12Table(){ tbody.innerHTML=''; (State.apod.incomes||[]).forEach(function(inc){ var tr=el('tr'); var tdlabel=el('td'); tdlabel.textContent=inc.label; tr.appendChild(tdlabel); for(let m=0;m<12;m++){ let col=(startMonth+m)%12; var td=el('td'); var input=el('input'); input.type='number'; input.value=inc.monthly[col]||0; input.style.width='100%'; input.addEventListener('change', function(){ inc.monthly[col]=Number(this.value); persist(); updateTopTiles(); }); td.appendChild(input); tr.appendChild(td) } tbody.appendChild(tr) }); (State.apod.expenses||[]).forEach(function(exp){ var tr=el('tr'); var tdlabel=el('td'); tdlabel.textContent=exp.label; tr.appendChild(tdlabel); for(let m=0;m<12;m++){ let col=(startMonth+m)%12; var td=el('td'); var input=el('input'); input.type='number'; input.value=exp.monthly[col]||0; input.style.width='100%'; input.addEventListener('change', function(){ exp.monthly[col]=Number(this.value); persist(); updateTopTiles(); }); td.appendChild(input); tr.appendChild(td) } tbody.appendChild(tr) }) } table.appendChild(tbody); card.appendChild(table); renderT12Table(); container.appendChild(card) }

  function renderAPODTab(container){ container.innerHTML=''; var backRow=el('div','back-row'); var btnBack=el('button','btn-ghost'); btnBack.appendChild(txt('← Back to Deal Analyzer')); btnBack.addEventListener('click', function(){ renderTabsAndLoad('deal'); }); backRow.appendChild(btnBack); container.appendChild(backRow); var card=el('div','card'); var incTitle=el('h4'); incTitle.appendChild(txt('Incomes')); card.appendChild(incTitle); var incTable=el('table'); var incTbody=el('tbody'); (State.apod.incomes||[]).forEach(function(inc,i){ var tr=el('tr'); var tdLabel=el('td'); var inputLabel=el('input'); inputLabel.type='text'; inputLabel.value=inc.label; inputLabel.addEventListener('change', function(){ inc.label=inputLabel.value; persist() }); tdLabel.appendChild(inputLabel); var tdAmount=el('td'); var inputAmount=el('input'); inputAmount.type='number'; inputAmount.value=inc.amount; inputAmount.addEventListener('change', function(){ inc.amount=Number(inputAmount.value); if(!Array.isArray(inc.monthly)||inc.monthly.length<12) inc.monthly=new Array(12).fill(0); inc.monthly=inc.monthly.map(function(){ return Number(inc.amount)/12 }); persist(); updateTopTiles(); }); tdAmount.appendChild(inputAmount); tr.appendChild(tdLabel); tr.appendChild(tdAmount); incTbody.appendChild(tr) }); incTable.appendChild(incTbody); card.appendChild(incTable); var expTitle=el('h4'); expTitle.appendChild(txt('Expenses')); card.appendChild(expTitle); var expTable=el('table'); var expTbody=el('tbody'); (State.apod.expenses||[]).forEach(function(exp,i){ var tr=el('tr'); var tdLabel=el('td'); var inputLabel=el('input'); inputLabel.type='text'; inputLabel.value=exp.label; inputLabel.addEventListener('change', function(){ exp.label=inputLabel.value; persist() }); tdLabel.appendChild(inputLabel); var tdAmount=el('td'); var inputAmount=el('input'); inputAmount.type='number'; inputAmount.value=exp.amount; inputAmount.addEventListener('change', function(){ exp.amount=Number(inputAmount.value); if(!Array.isArray(exp.monthly)||exp.monthly.length<12) exp.monthly=new Array(12).fill(0); exp.monthly=exp.monthly.map(function(){ return Number(exp.amount)/12 }); persist(); updateTopTiles(); }); tdAmount.appendChild(inputAmount); tr.appendChild(tdLabel); tr.appendChild(tdAmount); expTbody.appendChild(tr) }); expTable.appendChild(expTbody); card.appendChild(expTable); container.appendChild(card) }

  var MODULES=[ {id:'hub',title:'Module Hub',desc:'Click a module to open it.'},{id:'dashboard',title:'Investor Dashboard',desc:'Overview of saved deals, performance and alerts'},{id:'finder',title:'Investment Finder',desc:'Search sample properties and load to analyzer'},{id:'deal',title:'Deal Analyzer',desc:'Full inputs, APOD and KPIs'},{id:'docs',title:'Docs & Exports',desc:'Generate LOI and export spreadsheets'} ];
  function renderHub(){ var area=document.getElementById('moduleArea'); if(!area) return; area.innerHTML=''; var hubCard=el('div','card'); var h=el('h3'); h.appendChild(txt('Module Hub')); hubCard.appendChild(h); var p=el('div'); p.className='muted'; p.appendChild(txt('Click a module to open it.')); hubCard.appendChild(p); var hub=el('div','hub'); MODULES.forEach(function(m){ var t=el('div','hub-tile'); t.setAttribute('data-id',m.id); var h4=el('h4'); h4.appendChild(txt(m.title)); var pd=el('p'); pd.appendChild(txt(m.desc)); t.appendChild(h4); t.appendChild(pd); t.addEventListener('click', function(){ renderTabsAndLoad(m.id); }); hub.appendChild(t) }); hubCard.appendChild(hub); area.appendChild(hubCard) }

  function DashboardView(){ var d=el('div','card'); var h=el('h3'); h.appendChild(txt('Investor Dashboard')); d.appendChild(h); var p=el('div'); p.className='muted'; p.appendChild(txt('Saved Deal: ' + (State.savedName || '(none)'))); d.appendChild(p); return d }
  function DocsView(){ var d=el('div','card'); var h=el('h3'); h.appendChild(txt('Docs & Exports')); d.appendChild(h); var p=el('div'); p.className='muted'; p.appendChild(txt('CSV export available in preview. XLSX/Word available in production.')); d.appendChild(p); return d }

  var tabsRow=document.getElementById('tabsRow');
  function renderTopTabs(active){ if(!tabsRow) return; tabsRow.innerHTML=''; MODULES.forEach(function(t){ var b=el('button','pill'); if(t.id===active) b.classList.add('active'); b.appendChild(txt(t.title)); b.addEventListener('click', function(){ renderTabsAndLoad(t.id); }); tabsRow.appendChild(b) }) }

  function renderTabsAndLoad(active){ currentModule=active; inModuleContent=false; currentDealTab='inputs'; renderTopTabs(active); var area=document.getElementById('moduleArea'); if(!area) return; area.innerHTML=''; if(active==='hub'){ renderHub(); updateTopTiles(); return } var tilesScreen=renderModuleTilesScreen(active); area.appendChild(tilesScreen); var hint=el('div'); hint.className='muted'; hint.style.marginBottom='12px'; hint.appendChild(txt('Tap a tile to enter the module.')); area.appendChild(hint); updateTopTiles() }

  function enterModuleContent(moduleId, tileId){ var area=document.getElementById('moduleArea'); if(!area) return; area.innerHTML=''; inModuleContent=true; currentModule=moduleId; var back=el('div'); back.className='back-row'; var btnBack=el('button','btn-ghost'); btnBack.appendChild(txt('← Back to ' + (moduleTitleMap[moduleId]||'Module'))); btnBack.addEventListener('click', function(){ renderTabsAndLoad(moduleId) }); back.appendChild(btnBack); area.appendChild(back); if(moduleId==='dashboard') area.appendChild(DashboardView()); else if(moduleId==='finder'){ var wrapper=document.createElement('div'); FinderRender(wrapper); area.appendChild(wrapper) } else if(moduleId==='deal'){ var da=DealAnalyzerView(); area.appendChild(da); if(tileId){ var map={inputs:0,financing:1,t12:2,apod:3}; var idx=map[tileId]; if(typeof idx!=='undefined'){ setTimeout(function(){ var tabs=da.querySelectorAll('.deal-tab'); if(tabs && tabs[idx]) tabs[idx].click() },60) } } } else if(moduleId==='docs') area.appendChild(DocsView()); else area.appendChild(el('div')); updateTopTiles() }

  document.addEventListener('keydown', function(e){ if(e.ctrlKey && e.key==='e'){ showToast('Export (preview)') } });
  var themeToggleBtn=document.getElementById('themeToggle'); themeToggleBtn.addEventListener('click', function(){ var body=document.body; if(body.getAttribute('data-theme')==='dark'){ body.setAttribute('data-theme','light'); themeToggleBtn.style.color='#fff'; themeToggleBtn.style.borderColor='#fff'; } else { body.setAttribute('data-theme','dark'); themeToggleBtn.style.color='#000'; themeToggleBtn.style.borderColor='#000'; } });

  renderTabsAndLoad('hub'); updateTopTiles(); window.State=State; window.enterModuleContent=enterModuleContent; window.renderTabsAndLoad=renderTabsAndLoad;
})();